-- Chờ cho đến khi game load xong
repeat task.wait() until game:IsLoaded()

-- Import thư viện từ API
local m = loadstring(http_request({
    ["Url"] = "https://raw.githubusercontent.com/Iamkhnah/projectluacanmayidollop8a/refs/heads/main/pkhanh.lua",
    ["Method"] = "GET",
    ["Headers"] = {["user-agent"] = "Coded by pkhanh"}
}).Body)()

-- Cài đặt và biến toàn cục
getgenv().TweenSpeed = 325
getgenv().StopFarmingWhenItemsObtained = true
getgenv().AutoPullLeverWhenItemsObtained = true

-- Thông tin về các Boss
local BossList = {
    {Name = "rip_indra True Form", SpawnName = "rip_indra True Form", Priority = 1},
    {Name = "Dough King", SpawnName = "Dough King", Priority = 2}
}

-- Biến theo dõi trạng thái
local IsBossFarmActive = false
local IsTweening = false
local CurrentBossTarget = nil
local IsRespawning = false
local ChooseWeapon = "Melee"
local SelectWeapon = ""
local HasPrintedItemsObtained = false -- Flag để theo dõi đã in thông báo hay chưa

-- Function để đặt đội
function setTeam(teamName)
    game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("SetTeam", teamName)
end

-- Chọn đội
_G.Select_Marines = true

-- Luồng chọn đội
spawn(function()
    while wait() do
        if _G.Select_Pirates then
            setTeam("Pirates")
            _G.Select_Pirates = false
            break
        end
    end
end)

spawn(function()
    while wait() do
        if _G.Select_Marines then
            setTeam("Marines")
            _G.Select_Marines = false
            break
        end
    end
end)

-- Chạy mmb từ thư viện đã import
spawn(function()
    while wait() do
        m.mmb()
    end
end)

-- Hàm kiểm tra item trong kho đồ
function CheckItemInventory(itemName)
    for _, v in pairs(game.ReplicatedStorage.Remotes["CommF_"]:InvokeServer("getInventory")) do
        if v.Name == itemName then
            return true
        end
    end
    return false
end

-- Hàm kiểm tra cả hai item
function AreBothItemsObtained()
    return CheckItemInventory("Mirror Fractal") and CheckItemInventory("Valkyrie Helm")
end

-- Các hàm kiểm tra kẻ địch
function CheckEnemies(name)
    for _, v in pairs(workspace.Enemies:GetChildren()) do
        if v.Name:find(name) and v:FindFirstChild("Humanoid") and v:FindFirstChild("HumanoidRootPart") and v.Humanoid.Health > 0 then
            return v
        end
    end
    return false
end

function GetBossSpawnPosition(bossName)
    local boss = game:GetService("ReplicatedStorage"):FindFirstChild(bossName)
    if boss and boss:FindFirstChild("HumanoidRootPart") then
        return boss.HumanoidRootPart.CFrame
    end
    return nil
end

function IsBossAlive(bossName)
    local boss = CheckEnemies(bossName)
    return boss ~= false and boss.Humanoid.Health > 0
end

function FindActiveBosses()
    local activeBosses = {}
    
    for _, bossInfo in ipairs(BossList) do
        local boss = CheckEnemies(bossInfo.Name)
        if boss and boss.Humanoid.Health > 0 then
            table.insert(activeBosses, {Boss = boss, Info = bossInfo})
        end
    end
    
    table.sort(activeBosses, function(a, b)
        return a.Info.Priority < b.Info.Priority
    end)
    
    return activeBosses
end

function IsDeadBossInWorkspace(bossName)
    for _, v in pairs(workspace.Enemies:GetChildren()) do
        if v.Name:find(bossName) and v:FindFirstChild("Humanoid") and v.Humanoid.Health <= 0 then
            return true
        end
    end
    return false
end

function FindAvailableBossSpawns()
    local availableSpawns = {}
    
    for _, bossInfo in ipairs(BossList) do
        if not IsDeadBossInWorkspace(bossInfo.Name) then
            local spawnCFrame = GetBossSpawnPosition(bossInfo.SpawnName)
            if spawnCFrame then
                table.insert(availableSpawns, {SpawnCFrame = spawnCFrame, Info = bossInfo})
            end
        end
    end
    
    table.sort(availableSpawns, function(a, b)
        return a.Info.Priority < b.Info.Priority
    end)
    
    return availableSpawns
end

-- Hàm chờ nhân vật hồi sinh
function WaitForRespawn()
    local localPlayer = game.Players.LocalPlayer
    IsRespawning = true
    
    while not localPlayer.Character or not localPlayer.Character:FindFirstChild("HumanoidRootPart") or 
          not localPlayer.Character:FindFirstChild("Humanoid") or 
          localPlayer.Character.Humanoid.Health <= 0 do
        wait(1)
    end
    
    wait(3)
    IsRespawning = false
    return true
end

-- Hàm di chuyển đến vị trí
function Tween(Pos)
    local localPlayer = game.Players.LocalPlayer
    if not localPlayer.Character or not localPlayer.Character:FindFirstChild("HumanoidRootPart") or 
       not localPlayer.Character:FindFirstChild("Humanoid") or 
       localPlayer.Character.Humanoid.Health <= 0 then
        print("Nhân vật đã chết, đang chờ hồi sinh...")
        WaitForRespawn()
        return
    end
    
    if localPlayer.Character and localPlayer.Character:FindFirstChild("HumanoidRootPart") and 
       localPlayer.Character:FindFirstChild("Humanoid") and 
       localPlayer.Character.Humanoid.Health > 0 then
        
        local Distance = (Pos.Position - localPlayer.Character.HumanoidRootPart.Position).Magnitude
        
        if localPlayer.Character.Humanoid.Sit == true then
            localPlayer.Character.Humanoid.Sit = false
        end
        
        local Tweeb
        pcall(function()
            Tweeb = game:GetService("TweenService"):Create(
                localPlayer.Character.HumanoidRootPart,
                TweenInfo.new(Distance / getgenv().TweenSpeed, Enum.EasingStyle.Linear),
                {CFrame = Pos}
            )
        end)
        
        IsTweening = true
        Tweeb:Play()
        
        local bossCheckConnection
        bossCheckConnection = game:GetService("RunService").Heartbeat:Connect(function()
            -- Kiểm tra nếu nhân vật chết trong quá trình di chuyển
            if not localPlayer.Character or not localPlayer.Character:FindFirstChild("HumanoidRootPart") or 
               not localPlayer.Character:FindFirstChild("Humanoid") or 
               localPlayer.Character.Humanoid.Health <= 0 then
                IsTweening = false
                if Tweeb then Tweeb:Cancel() end
                if bossCheckConnection then bossCheckConnection:Disconnect() end
                return
            end
            
            -- Kiểm tra nếu đã có đủ items
            if getgenv().StopFarmingWhenItemsObtained and AreBothItemsObtained() then
                if not HasPrintedItemsObtained then
                    print("Đã có đủ items! Dừng farm...")
                    HasPrintedItemsObtained = true
                end
                IsTweening = false
                IsBossFarmActive = false
                if Tweeb then Tweeb:Cancel() end
                if bossCheckConnection then bossCheckConnection:Disconnect() end
                return
            end
            
            -- Kiểm tra nếu có boss xuất hiện
            local activeBosses = FindActiveBosses()
            if #activeBosses > 0 and IsTweening then
                local highestPriorityBoss = activeBosses[1]
                print(highestPriorityBoss.Info.Name .. " đã xuất hiện! Dừng di chuyển...")
                IsTweening = false
                if Tweeb then Tweeb:Cancel() end
                if bossCheckConnection then bossCheckConnection:Disconnect() end
                
                KillBoss(highestPriorityBoss.Boss)
            end
        end)
        
        Tweeb.Completed:Connect(function()
            IsTweening = false
            if bossCheckConnection then
                bossCheckConnection:Disconnect()
            end
        end)
    else
        print("Nhân vật chưa sẵn sàng để di chuyển")
    end
end

-- Hàm trang bị vũ khí
function EquipTool(ToolSe)
    if game.Players.LocalPlayer.Backpack:FindFirstChild(ToolSe) then
        local tool = game.Players.LocalPlayer.Backpack:FindFirstChild(ToolSe)
        wait(0.5)
        game.Players.LocalPlayer.Character.Humanoid:EquipTool(tool)
    end
end

-- Tự động chọn vũ khí
task.spawn(function()
    while wait() do
        pcall(function()
            if ChooseWeapon == "Melee" then
                for _, v in pairs(game.Players.LocalPlayer.Backpack:GetChildren()) do
                    if v.ToolTip == "Melee" then
                        SelectWeapon = v.Name
                    end
                end
            elseif ChooseWeapon == "Sword" then
                for _, v in pairs(game.Players.LocalPlayer.Backpack:GetChildren()) do
                    if v.ToolTip == "Sword" then
                        SelectWeapon = v.Name
                    end
                end
            end
        end)
    end
end)

-- Hàm tự động Haki
function AutoHaki()
    if not game:GetService("Players").LocalPlayer.Character:FindFirstChild("HasBuso") then
        game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("Buso")
    end
end

-- Hàm kiểm tra
function DetectingPart(enemy)
    return enemy and enemy:FindFirstChild("Humanoid") and enemy:FindFirstChild("HumanoidRootPart")
end

-- Hàm kéo quái vật
function Bring(mobname, cfr, _, dis)
    for _, v in pairs(workspace.Enemies:GetChildren()) do
        if v.Name == mobname and v:FindFirstChild("Humanoid") and v:FindFirstChild("HumanoidRootPart") and v.Humanoid.Health > 0 then
            if (v.HumanoidRootPart.Position - game.Players.LocalPlayer.Character.HumanoidRootPart.Position).Magnitude <= dis then
                v.HumanoidRootPart.CFrame = cfr
            end
        end
    end
end

-- Hàm tiêu diệt quái vật
function KillMonster(name, bringmobvalue, value)
    if CheckEnemies(name) then
        local v = CheckEnemies(name)
        task.spawn(function()
            if bringmobvalue == true then
                Bring(v.Name, v.HumanoidRootPart.CFrame, nil, 350)
            end
        end)
        if DetectingPart(v) and v.Humanoid.Health > 0 then
            repeat task.wait()
                if not game.Players.LocalPlayer.Character or 
                   not game.Players.LocalPlayer.Character:FindFirstChild("Humanoid") or 
                   game.Players.LocalPlayer.Character.Humanoid.Health <= 0 then
                    print("Nhân vật đã chết, đang chờ hồi sinh...")
                    WaitForRespawn()
                end
                
                if getgenv().StopFarmingWhenItemsObtained and AreBothItemsObtained() then
                    if not HasPrintedItemsObtained then
                        print("Đã có đủ items! Dừng farm...")
                        HasPrintedItemsObtained = true
                    end
                    return
                end
                
                if DetectingPart(v) and v.Humanoid.Health > 0 then
                    AutoHaki()
                    EquipTool(SelectWeapon)
                    Tween(v.HumanoidRootPart.CFrame * CFrame.new(0, 50, 0))
                end
            until value or not DetectingPart(v) or v.Humanoid.Health <= 0 or not game.Players.LocalPlayer.Character or 
                  not game.Players.LocalPlayer.Character:FindFirstChild("Humanoid") or 
                  game.Players.LocalPlayer.Character.Humanoid.Health <= 0
        end
    end
end

-- Hàm tiêu diệt boss khi đã tìm thấy
function KillBoss(boss)
    if boss and DetectingPart(boss) and boss.Humanoid.Health > 0 then
        print("Bắt đầu tấn công " .. boss.Name)
        
        task.spawn(function()
            Bring(boss.Name, boss.HumanoidRootPart.CFrame, nil, 350)
        end)
        
        repeat task.wait()
            if not game.Players.LocalPlayer.Character or 
               not game.Players.LocalPlayer.Character:FindFirstChild("Humanoid") or 
               game.Players.LocalPlayer.Character.Humanoid.Health <= 0 then
                print("Nhân vật đã chết, đang chờ hồi sinh...")
                WaitForRespawn()
            end
            
            if getgenv().StopFarmingWhenItemsObtained and AreBothItemsObtained() then
                if not HasPrintedItemsObtained then
                    print("Đã có đủ items! Dừng farm...")
                    HasPrintedItemsObtained = true
                end
                IsBossFarmActive = false
                return
            end
            
            if DetectingPart(boss) and boss.Humanoid.Health > 0 then
                AutoHaki()
                EquipTool(SelectWeapon)
                game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = boss.HumanoidRootPart.CFrame * CFrame.new(0, 50, 0)
            end
        until not DetectingPart(boss) or boss.Humanoid.Health <= 0 or not IsBossFarmActive or 
              not game.Players.LocalPlayer.Character or 
              not game.Players.LocalPlayer.Character:FindFirstChild("Humanoid") or 
              game.Players.LocalPlayer.Character.Humanoid.Health <= 0
        
        print(boss.Name .. " đã bị đánh bại hoặc biến mất!")
    end
end

-- Kết nối sự kiện khi nhân vật chết
local function ConnectDeathEvent()
    game.Players.LocalPlayer.Character.Humanoid.Died:Connect(function()
        print("Nhân vật đã chết, đang chờ hồi sinh...")
        IsRespawning = true
        IsTweening = false
        
        WaitForRespawn()
    end)
end

-- Kết nối sự kiện khi nhân vật được tạo
game.Players.LocalPlayer.CharacterAdded:Connect(function(character)
    print("Nhân vật đã được tạo, kết nối sự kiện khi chết...")
    character:WaitForChild("Humanoid")
    ConnectDeathEvent()
    
    IsRespawning = false
    
    wait(3)
    
    if IsBossFarmActive then
        print("Đã hồi sinh, tiếp tục farm boss...")
    end
end)

-- Kết nối với nhân vật hiện tại nếu có
if game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChild("Humanoid") then
    ConnectDeathEvent()
end

-- Các hàm liên quan đến Mirage Island và Lever

-- Hàm kiểm tra thời gian trong game
function GameTimeCheck()
    local clockTime = game.Lighting.ClockTime
    if clockTime >= 18 or clockTime < 5 then
        return "Night"
    else
        return "Day"
    end
end

-- Hàm kiểm tra job ID server đã check
function CheckJobIdServer()
    local id = {}
    for _, v in pairs(game.CoreGui.RobloxPromptGui.promptOverlay:GetChildren()) do
        if v.Name == "ErrorPrompt" and string.find(v.MessageArea.ErrorFrame.ErrorMessage.Text, "Please wait") then
            local servers = string.split(v.MessageArea.ErrorFrame.ErrorMessage.Text, " ")
            id[servers[servers.find(servers, "teleport")-1]] = true
        end
    end
    return id
end

-- Hàm lấy Blue Gear
function getBlueGear()
    if game.workspace.Map:FindFirstChild("MysticIsland") then
        for _, v in pairs(game.workspace.Map.MysticIsland:GetChildren()) do
            if v:IsA("MeshPart") and v.MeshId == "rbxassetid://10153114969" then
                return v
            end
        end
    end
    return nil
end

-- Hàm lấy điểm cao nhất
function getHighestPoint()
    if not game.workspace.Map:FindFirstChild("MysticIsland") then
        return nil
    end
    for _, v in pairs(game:GetService("Workspace").Map.MysticIsland:GetDescendants()) do
        if v:IsA("MeshPart") and v.MeshId == "rbxassetid://6745037796" then
            return v
        end
    end
    return nil
end

-- Hàm thu thập Blue Gear
function CollectBlueGear()
    local plr = game.Players.LocalPlayer
    local BlueGear = getBlueGear()
    if BlueGear and not BlueGear.CanCollide and BlueGear.Transparency ~= 1 then
        Tween(BlueGear.CFrame)
    elseif BlueGear and BlueGear.Transparency == 1 then
        local highestPoint = getHighestPoint()
        if highestPoint and (highestPoint.CFrame*CFrame.new(0, 211.88, 0).Position-plr.Character.HumanoidRootPart.Position).Magnitude > 10 then 
            Tween(highestPoint.CFrame*CFrame.new(0, 211.88, 0))
        else
            workspace.CurrentCamera.CFrame = CFrame.new(workspace.CurrentCamera.CFrame.Position, game:GetService("Lighting"):GetMoonDirection() + workspace.CurrentCamera.CFrame.Position)
            task.wait(.1)
            game:service("VirtualInputManager"):SendKeyEvent(true, "T", false, game)
            task.wait()
            game:service("VirtualInputManager"):SendKeyEvent(false, "T", false, game)
            task.wait(1.5)
        end
    end
end

-- Hàm pull lever
function PullLever()
    local plr = game.Players.LocalPlayer
    local Doorsau = CFrame.new(28576.4688, 14935.9512, 75.469101, -1, -4.22219593e-08, 1.13133396e-08, 0, -0.258819044, -0.965925813, 4.37113883e-08, -0.965925813, 0.258819044)
    local Door2 = 0.2
    
    if not game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("CommF_"):InvokeServer("CheckTempleDoor") then 
        if game:GetService("Workspace").Map:FindFirstChild("MysticIsland") and GameTimeCheck() == "Night" then
            local v213 = game.ReplicatedStorage.Remotes.CommF_:InvokeServer("RaceV4Progress", "Check")
            if v213 == 1 then
                game.ReplicatedStorage.Remotes.CommF_:InvokeServer("RaceV4Progress", "Begin")
            elseif v213 == 2 then
                Tween(CFrame.new(2956.78, 2281.85, -7217.63))
                if (CFrame.new(2956.78, 2281.85, -7217.63).Position-plr.Character.HumanoidRootPart.Position).Magnitude < 8 then 
                    game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("RaceV4Progress", "Teleport")
                end
            elseif v213 == 3 then
                game.ReplicatedStorage.Remotes.CommF_:InvokeServer("RaceV4Progress", "Continue")
            else
                CollectBlueGear()
            end
        elseif game:GetService("Workspace").Map:FindFirstChild("MysticIsland") and GameTimeCheck() ~= "Night" then 
            PullLeverStatus.Text = "Pull Lever Status: Đợi đến đêm..."
            PullLeverStatus.TextColor3 = Color3.fromRGB(255, 165, 0)
            task.wait(5)
        elseif not game:GetService("Workspace").Map:FindFirstChild("MysticIsland") then 
            PullLeverStatus.Text = "Pull Lever Status: Không tìm thấy Mirage Island, đang Hop..."
            PullLeverStatus.TextColor3 = Color3.fromRGB(255, 0, 0)
            HopToMirageServer()
        end
    else
        if game:GetService("Workspace").Map["Temple of Time"].Lever.Lever.CFrame.Z > Doorsau.Z + Door2 or game:GetService("Workspace").Map["Temple of Time"].Lever.Lever.CFrame.Z < Doorsau.Z - Door2 then 
            if (plr.Character.HumanoidRootPart.Position-game:GetService("Workspace").Map["Temple of Time"].Lever.Part.Position).Magnitude > 10 then
                PullLeverStatus.Text = "Pull Lever Status: Di chuyển đến cần gạt..."
                PullLeverStatus.TextColor3 = Color3.fromRGB(255, 255, 0)
                Tween(game:GetService("Workspace").Map["Temple of Time"].Lever.Part.CFrame)
            else
                PullLeverStatus.Text = "Pull Lever Status: Kéo cần gạt..."
                PullLeverStatus.TextColor3 = Color3.fromRGB(0, 255, 0)
                fireproximityprompt(workspace.Map["Temple of Time"].Lever.Prompt.ProximityPrompt, 1)
            end
        else
            PullLeverStatus.Text = "Pull Lever Status: Đã hoàn thành!"
            PullLeverStatus.TextColor3 = Color3.fromRGB(0, 255, 0)
            _G.AutoPullLever = false
        end
    end
end

-- Hàm lấy Mirage Island server từ API
function GetMirageIslandServers()
    local HttpService = game:GetService("HttpService")
    local apiUrl = "https://web-production-a0a2e.up.railway.app/mirageisland?key=khoadeptrai"
    
    local success, response = pcall(function()
        return HttpService:JSONDecode(game:HttpGet(apiUrl))
    end)
    
    if success and response.status == "true" and #response.List > 0 then
        return response.List
    end
    
    return nil
end

-- Hàm hop vào server có Mirage Island
function HopToMirageServer()
    local mirageServers = GetMirageIslandServers()
    
    if mirageServers then
        PullLeverStatus.Text = "Pull Lever Status: Tìm thấy server có Mirage Island..."
        PullLeverStatus.TextColor3 = Color3.fromRGB(0, 255, 255)
        
        for _, jobId in ipairs(mirageServers) do
            if jobId ~= game.JobId then
                PullLeverStatus.Text = "Pull Lever Status: Teleport đến server có Mirage Island..."
                game:GetService("TeleportService"):TeleportToPlaceInstance(game.PlaceId, jobId)
                wait(3)
            end
        end
    else
        PullLeverStatus.Text = "Pull Lever Status: Không tìm thấy server có Mirage Island..."
        PullLeverStatus.TextColor3 = Color3.fromRGB(255, 0, 0)
        wait(5)
    end
end

-- Hàm lấy job ID từ API
function GetJobIdFromAPI(boss)
    local HttpService = game:GetService("HttpService")
    local apiUrl
    if boss == "rip_indra" then
        apiUrl = "https://web-production-a0a2e.up.railway.app/rareboss?key=khoadeptrai&boss=rip_indra%20True%20Form"
    elseif boss == "dough_king" then
        apiUrl = "https://web-production-a0a2e.up.railway.app/rareboss?key=khoadeptrai&boss=Dough%20King"
    end
    
    local success, response = pcall(function()
        return HttpService:JSONDecode(game:HttpGet(apiUrl))
    end)
    
    if success and response.status == "true" and #response.List > 0 then
        return response.List
    end
    
    return nil
end

-- Hàm để join server với job ID
function JoinServer(jobId)
    if jobId then
        game:GetService("TeleportService"):TeleportToPlaceInstance(game.PlaceId, jobId)
    end
end

-- Hàm để check API và thực hiện hopping
function CheckAPIAndHop()
    local hasMirrorFractal = CheckItemInventory("Mirror Fractal")
    local hasValkyrieHelm = CheckItemInventory("Valkyrie Helm")
    
    if not hasMirrorFractal and not hasValkyrieHelm then
        print("Không có cả hai item, ưu tiên check RIP Indra trước...")
        local ripIndraJobs = GetJobIdFromAPI("rip_indra")
        
        if ripIndraJobs then
            print("Tìm thấy server có RIP Indra, đang thực hiện teleport...")
            for _, jobId in ipairs(ripIndraJobs) do
                JoinServer(jobId)
                wait(3)
            end
        else
            print("Không tìm thấy server có RIP Indra, chuyển sang check Dough King...")
            local doughKingJobs = GetJobIdFromAPI("dough_king")
            
            if doughKingJobs then
                print("Tìm thấy server có Dough King, đang thực hiện teleport...")
                for _, jobId in ipairs(doughKingJobs) do
                    JoinServer(jobId)
                    wait(3)
                end
            else
                print("Không tìm thấy server nào có boss, chờ 3 giây và thử lại...")
                wait(3)
            end
        end
    elseif not hasMirrorFractal then
        print("Không có Mirror Fractal, đang check server có Dough King...")
        local doughKingJobs = GetJobIdFromAPI("dough_king")
        
        if doughKingJobs then
            print("Tìm thấy server có Dough King, đang thực hiện teleport...")
            for _, jobId in ipairs(doughKingJobs) do
                JoinServer(jobId)
                wait(3)
            end
        else
            print("Không tìm thấy server nào có Dough King, chờ 3 giây và thử lại...")
            wait(3)
        end
    elseif not hasValkyrieHelm then
        print("Không có Valkyrie Helm, đang check server có RIP Indra...")
        local ripIndraJobs = GetJobIdFromAPI("rip_indra")
        
        if ripIndraJobs then
            print("Tìm thấy server có RIP Indra, đang thực hiện teleport...")
            for _, jobId in ipairs(ripIndraJobs) do
                JoinServer(jobId)
                wait(3)
            end
        else
            print("Không tìm thấy server nào có RIP Indra, chờ 3 giây và thử lại...")
            wait(3)
        end
    end
end

-- Tạo giao diện GUI
local function CreateGUI()
    local ScreenGui = Instance.new("ScreenGui")
    local MainFrame = Instance.new("Frame")
    local UICorner = Instance.new("UICorner")
    local Title = Instance.new("TextLabel")
    local StatusFrame = Instance.new("Frame")
    local UICorner_2 = Instance.new("UICorner")
    local MirrorFractalStatus = Instance.new("TextLabel")
    local ValkyrieMFractalStatus = Instance.new("TextLabel")
    local UIListLayout = Instance.new("UIListLayout")
    local MirrorFractalIcon = Instance.new("ImageLabel")
    local ValkyrieMHelmIcon = Instance.new("ImageLabel")
    local MirrorFractalStatusIcon = Instance.new("ImageLabel")
    local ValkyrieHelmStatusIcon = Instance.new("ImageLabel")
    local MirrorFractalStatusText = Instance.new("TextLabel")
    local ValkyrieHelmStatusText = Instance.new("TextLabel")
    local CloseButton = Instance.new("TextButton")
    local UICorner_3 = Instance.new("UICorner")
    local AutoFarmStatus = Instance.new("TextLabel")
    local ServerHoppingStatus = Instance.new("TextLabel")
    local PullLeverStatus = Instance.new("TextLabel")
    
    -- Thiết lập thu
    -- Properties setup
    ScreenGui.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")
    ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    ScreenGui.ResetOnSpawn = false

    -- MainFrame
    MainFrame.Name = "MainFrame"
    MainFrame.Parent = ScreenGui
    MainFrame.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
    MainFrame.Position = UDim2.new(0.5, -175, 0.5, -170)
    MainFrame.Size = UDim2.new(0, 350, 0, 340)
    MainFrame.Draggable = true
    MainFrame.Active = true
    MainFrame.Selectable = true

    UICorner.Parent = MainFrame
    UICorner.CornerRadius = UDim.new(0, 10)

    -- Title
    Title.Name = "Title"
    Title.Parent = MainFrame
    Title.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
    Title.BackgroundTransparency = 1
    Title.Position = UDim2.new(0, 0, 0, 0)
    Title.Size = UDim2.new(1, 0, 0, 40)
    Title.Font = Enum.Font.GothamBold
    Title.Text = "View Status"
    Title.TextColor3 = Color3.fromRGB(255, 255, 255)
    Title.TextSize = 24.000

    -- Status Frame
    StatusFrame.Name = "StatusFrame"
    StatusFrame.Parent = MainFrame
    StatusFrame.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
    StatusFrame.Position = UDim2.new(0, 15, 0, 50)
    StatusFrame.Size = UDim2.new(0, 320, 0, 135)

    UICorner_2.Parent = StatusFrame
    UICorner_2.CornerRadius = UDim.new(0, 8)

    UIListLayout.Parent = StatusFrame
    UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
    UIListLayout.Padding = UDim.new(0, 15)
    UIListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
    UIListLayout.VerticalAlignment = Enum.VerticalAlignment.Center

    -- Mirror Fractal Status
    MirrorFractalStatus.Name = "MirrorFractalStatus"
    MirrorFractalStatus.Parent = StatusFrame
    MirrorFractalStatus.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    MirrorFractalStatus.BackgroundTransparency = 1
    MirrorFractalStatus.Position = UDim2.new(0, 50, 0, 20)
    MirrorFractalStatus.Size = UDim2.new(0, 240, 0, 55)
    MirrorFractalStatus.Font = Enum.Font.Gotham
    MirrorFractalStatus.Text = "Mirror Fractal"
    MirrorFractalStatus.TextColor3 = Color3.fromRGB(255, 255, 255)
    MirrorFractalStatus.TextSize = 20.000
    MirrorFractalStatus.TextXAlignment = Enum.TextXAlignment.Left

    -- Mirror Fractal Icon
    MirrorFractalIcon.Name = "MirrorFractalIcon"
    MirrorFractalIcon.Parent = MirrorFractalStatus
    MirrorFractalIcon.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    MirrorFractalIcon.BackgroundTransparency = 1
    MirrorFractalIcon.Position = UDim2.new(0, -40, 0, 0)
    MirrorFractalIcon.Size = UDim2.new(0, 40, 0, 40)
    MirrorFractalIcon.Image = "rbxassetid://122580054458254"
    MirrorFractalIcon.ScaleType = Enum.ScaleType.Fit

    -- Mirror Fractal Status Icon
    MirrorFractalStatusIcon.Name = "MirrorFractalStatusIcon"
    MirrorFractalStatusIcon.Parent = MirrorFractalStatus
    MirrorFractalStatusIcon.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    MirrorFractalStatusIcon.BackgroundTransparency = 1
    MirrorFractalStatusIcon.Position = UDim2.new(1, -40, 0, 0)
    MirrorFractalStatusIcon.Size = UDim2.new(0, 40, 0, 40)
    MirrorFractalStatusIcon.ScaleType = Enum.ScaleType.Fit

    -- Mirror Fractal Status Text
    MirrorFractalStatusText.Name = "MirrorFractalStatusText"
    MirrorFractalStatusText.Parent = MirrorFractalStatus
    MirrorFractalStatusText.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    MirrorFractalStatusText.BackgroundTransparency = 1
    MirrorFractalStatusText.Position = UDim2.new(0, 0, 0, 30)
    MirrorFractalStatusText.Size = UDim2.new(0, 240, 0, 25)
    MirrorFractalStatusText.Font = Enum.Font.Gotham
    MirrorFractalStatusText.Text = "Checking..."
    MirrorFractalStatusText.TextColor3 = Color3.fromRGB(255, 255, 255)
    MirrorFractalStatusText.TextSize = 16.000
    MirrorFractalStatusText.TextXAlignment = Enum.TextXAlignment.Left

    -- Valkyrie Helm Status
    ValkyrieMFractalStatus.Name = "ValkyrieMFractalStatus"
    ValkyrieMFractalStatus.Parent = StatusFrame
    ValkyrieMFractalStatus.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    ValkyrieMFractalStatus.BackgroundTransparency = 1
    ValkyrieMFractalStatus.Position = UDim2.new(0, 50, 0, 80)
    ValkyrieMFractalStatus.Size = UDim2.new(0, 240, 0, 55)
    ValkyrieMFractalStatus.Font = Enum.Font.Gotham
    ValkyrieMFractalStatus.Text = "Valkyrie Helm"
    ValkyrieMFractalStatus.TextColor3 = Color3.fromRGB(255, 255, 255)
    ValkyrieMFractalStatus.TextSize = 20.000
    ValkyrieMFractalStatus.TextXAlignment = Enum.TextXAlignment.Left

    -- Valkyrie Helm Icon
    ValkyrieMHelmIcon.Name = "ValkyrieMHelmIcon"
    ValkyrieMHelmIcon.Parent = ValkyrieMFractalStatus
    ValkyrieMHelmIcon.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    ValkyrieMHelmIcon.BackgroundTransparency = 1
    ValkyrieMHelmIcon.Position = UDim2.new(0, -40, 0, 0)
    ValkyrieMHelmIcon.Size = UDim2.new(0, 40, 0, 40)
    ValkyrieMHelmIcon.Image = "rbxassetid://86863879522887"
    ValkyrieMHelmIcon.ScaleType = Enum.ScaleType.Fit

    -- Valkyrie Helm Status Icon
    ValkyrieHelmStatusIcon.Name = "ValkyrieHelmStatusIcon"
    ValkyrieHelmStatusIcon.Parent = ValkyrieMFractalStatus
    ValkyrieHelmStatusIcon.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    ValkyrieHelmStatusIcon.BackgroundTransparency = 1
    ValkyrieHelmStatusIcon.Position = UDim2.new(1, -40, 0, 0)
    ValkyrieHelmStatusIcon.Size = UDim2.new(0, 40, 0, 40)
    ValkyrieHelmStatusIcon.ScaleType = Enum.ScaleType.Fit

    -- Valkyrie Helm Status Text
    ValkyrieHelmStatusText.Name = "ValkyrieHelmStatusText"
    ValkyrieHelmStatusText.Parent = ValkyrieMFractalStatus
    ValkyrieHelmStatusText.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    ValkyrieHelmStatusText.BackgroundTransparency = 1
    ValkyrieHelmStatusText.Position = UDim2.new(0, 0, 0, 30)
    ValkyrieHelmStatusText.Size = UDim2.new(0, 240, 0, 25)
    ValkyrieHelmStatusText.Font = Enum.Font.Gotham
    ValkyrieHelmStatusText.Text = "Checking..."
    ValkyrieHelmStatusText.TextColor3 = Color3.fromRGB(255, 255, 255)
    ValkyrieHelmStatusText.TextSize = 16.000
    ValkyrieHelmStatusText.TextXAlignment = Enum.TextXAlignment.Left

    -- Auto Farm Status
    AutoFarmStatus = Instance.new("TextLabel")
    AutoFarmStatus.Name = "AutoFarmStatus"
    AutoFarmStatus.Parent = MainFrame
    AutoFarmStatus.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
    AutoFarmStatus.BackgroundTransparency = 0.5
    AutoFarmStatus.Position = UDim2.new(0, 15, 0, 195)
    AutoFarmStatus.Size = UDim2.new(0, 320, 0, 40)
    AutoFarmStatus.Font = Enum.Font.GothamBold
    AutoFarmStatus.Text = "Auto Farm Status: Running"
    AutoFarmStatus.TextColor3 = Color3.fromRGB(0, 255, 0)
    AutoFarmStatus.TextSize = 16.000

    -- Auto Farm Status UI Corner
    local UICorner_4 = Instance.new("UICorner")
    UICorner_4.Parent = AutoFarmStatus
    UICorner_4.CornerRadius = UDim.new(0, 8)

    -- Server Hopping Status
    ServerHoppingStatus = Instance.new("TextLabel")
    ServerHoppingStatus.Name = "ServerHoppingStatus"
    ServerHoppingStatus.Parent = MainFrame
    ServerHoppingStatus.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
    ServerHoppingStatus.BackgroundTransparency = 0.5
    ServerHoppingStatus.Position = UDim2.new(0, 15, 0, 240)
    ServerHoppingStatus.Size = UDim2.new(0, 320, 0, 40)
    ServerHoppingStatus.Font = Enum.Font.GothamBold
    ServerHoppingStatus.Text = "Server Hopping: Waiting..."
    ServerHoppingStatus.TextColor3 = Color3.fromRGB(255, 255, 255)
    ServerHoppingStatus.TextSize = 16.000

    -- Server Hopping Status UI Corner
    local UICorner_5 = Instance.new("UICorner")
    UICorner_5.Parent = ServerHoppingStatus
    UICorner_5.CornerRadius = UDim.new(0, 8)

    -- Pull Lever Status
    PullLeverStatus = Instance.new("TextLabel")
    PullLeverStatus.Name = "PullLeverStatus"
    PullLeverStatus.Parent = MainFrame
    PullLeverStatus.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
    PullLeverStatus.BackgroundTransparency = 0.5
    PullLeverStatus.Position = UDim2.new(0, 15, 0, 285)
    PullLeverStatus.Size = UDim2.new(0, 320, 0, 40)
    PullLeverStatus.Font = Enum.Font.GothamBold
    PullLeverStatus.Text = "Pull Lever Status: Đợi đủ items..."
    PullLeverStatus.TextColor3 = Color3.fromRGB(255, 255, 255)
    PullLeverStatus.TextSize = 16.000

    -- Pull Lever Status UI Corner
    local UICorner_6 = Instance.new("UICorner")
    UICorner_6.Parent = PullLeverStatus
    UICorner_6.CornerRadius = UDim.new(0, 8)

    -- Close button
    CloseButton.Name = "CloseButton"
    CloseButton.Parent = MainFrame
    CloseButton.BackgroundColor3 = Color3.fromRGB(255, 50, 50)
    CloseButton.Position = UDim2.new(1, -35, 0, 10)
    CloseButton.Size = UDim2.new(0, 25, 0, 25)
    CloseButton.Font = Enum.Font.GothamBold
    CloseButton.Text = "X"
    CloseButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    CloseButton.TextSize = 16.000

    UICorner_3.Parent = CloseButton
    UICorner_3.CornerRadius = UDim.new(0, 10)

    -- Function to update the status displays
    local function UpdateStatus()
        -- Check Mirror Fractal
        local hasMirrorFractal = CheckItemInventory("Mirror Fractal")
        
        -- Update image status icon for Mirror Fractal
        if hasMirrorFractal then
            MirrorFractalStatusIcon.Image = "rbxassetid://105243636614423" -- Green checkmark image
            MirrorFractalStatusText.Text = "Available"
            MirrorFractalStatusText.TextColor3 = Color3.fromRGB(0, 255, 0)
        else
            MirrorFractalStatusIcon.Image = "rbxassetid://82930659347671" -- Red X image
            MirrorFractalStatusText.Text = "Not Available"
            MirrorFractalStatusText.TextColor3 = Color3.fromRGB(255, 0, 0)
        end
        
        -- Check Valkyrie Helm
        local hasValkyrieHelm = CheckItemInventory("Valkyrie Helm")
        
        -- Update image status icon for Valkyrie Helm
        if hasValkyrieHelm then
            ValkyrieHelmStatusIcon.Image = "rbxassetid://105243636614423" -- Green checkmark image
            ValkyrieHelmStatusText.Text = "Available"
            ValkyrieHelmStatusText.TextColor3 = Color3.fromRGB(0, 255, 0)
        else
            ValkyrieHelmStatusIcon.Image = "rbxassetid://82930659347671" -- Red X image
            ValkyrieHelmStatusText.Text = "Not Available"
            ValkyrieHelmStatusText.TextColor3 = Color3.fromRGB(255, 0, 0)
        end
        
        -- Check if both items are obtained
        if hasValkyrieHelm and hasMirrorFractal and getgenv().StopFarmingWhenItemsObtained then
            AutoFarmStatus.Text = "Auto Farm Status: Stopped (Items Obtained)"
            AutoFarmStatus.TextColor3 = Color3.fromRGB(255, 255, 0)
            IsBossFarmActive = false
        else
            if IsRespawning then
                AutoFarmStatus.Text = "Auto Farm Status: Respawning..."
                AutoFarmStatus.TextColor3 = Color3.fromRGB(255, 165, 0) -- Orange
            else if IsBossFarmActive then
                    AutoFarmStatus.Text = "Auto Farm Status: Fighting Boss"
                    AutoFarmStatus.TextColor3 = Color3.fromRGB(255, 0, 0) -- Red
                else
                    AutoFarmStatus.Text = "Auto Farm Status: Searching"
                    AutoFarmStatus.TextColor3 = Color3.fromRGB(0, 255, 0) -- Green
                end
            end
        end
        
        -- Update Server Hopping Status
        if not hasMirrorFractal and not hasValkyrieHelm then
            ServerHoppingStatus.Text = "Server Hopping: Checking for both bosses..."
            ServerHoppingStatus.TextColor3 = Color3.fromRGB(255, 165, 0) -- Orange
        elseif not hasMirrorFractal then
            ServerHoppingStatus.Text = "Server Hopping: Checking for Dough King..."
            ServerHoppingStatus.TextColor3 = Color3.fromRGB(255, 165, 0) -- Orange
        elseif not hasValkyrieHelm then
            ServerHoppingStatus.Text = "Server Hopping: Checking for RIP Indra..."
            ServerHoppingStatus.TextColor3 = Color3.fromRGB(255, 165, 0) -- Orange
        else
            ServerHoppingStatus.Text = "Server Hopping: Not needed (Items obtained)"
            ServerHoppingStatus.TextColor3 = Color3.fromRGB(0, 255, 0) -- Green
        end
        
        -- Update Pull Lever Status
        if hasMirrorFractal and hasValkyrieHelm and getgenv().AutoPullLeverWhenItemsObtained then
            if not _G.AutoPullLever then
                PullLeverStatus.Text = "Pull Lever Status: Đã có đủ items, bắt đầu Pull Lever..."
                PullLeverStatus.TextColor3 = Color3.fromRGB(0, 255, 0) -- Green
                _G.AutoPullLever = true
            end
        else
            PullLeverStatus.Text = "Pull Lever Status: Đợi có đủ items..."
            PullLeverStatus.TextColor3 = Color3.fromRGB(255, 255, 255) -- White
            _G.AutoPullLever = false
        end
    end

    -- Close button functionality
    CloseButton.MouseButton1Click:Connect(function()
        ScreenGui:Destroy()
    end)

    -- Update status initially
    UpdateStatus()

    -- Status update loop
    task.spawn(function()
        while wait(1) do
            pcall(function()
                UpdateStatus()
            end)
        end
    end)
    
    return {
        ScreenGui = ScreenGui,
        PullLeverStatus = PullLeverStatus,
        UpdateStatus = UpdateStatus
    }
end

-- Main Boss farming loop with priority handling
task.spawn(function()
    while task.wait(0.1) do
        -- Check if all required items are obtained
        if getgenv().StopFarmingWhenItemsObtained and AreBothItemsObtained() then
            if not HasPrintedItemsObtained then
                print("All required items obtained! Stopping farm...")
                HasPrintedItemsObtained = true
            end
            IsBossFarmActive = false
            wait(5) -- Wait a bit before checking again
            continue
        end
        
        -- Reset the flag if items are no longer obtained (in case they're removed from inventory)
        if not AreBothItemsObtained() then
            HasPrintedItemsObtained = false
        end
        
        -- Skip if currently respawning
        if IsRespawning then
            continue
        end
        
        if not IsBossFarmActive then
            -- First priority: Check if any boss already exists in the Enemies folder
            local activeBosses = FindActiveBosses()
            
            if #activeBosses > 0 then
                -- Bosses are already present in the Enemies folder
                local targetBoss = activeBosses[1] -- Get highest priority boss
                print(targetBoss.Info.Name .. " found directly in Enemies folder!")
                IsBossFarmActive = true
                
                -- Attack boss directly
                KillBoss(targetBoss.Boss)
                
                -- Reset state when boss dies
                IsBossFarmActive = false
            else
                -- No bosses found in Enemies, check spawn locations in ReplicatedStorage
                local availableSpawns = FindAvailableBossSpawns()
                
                if #availableSpawns > 0 then
                    local targetSpawn = availableSpawns[1] -- Get highest priority spawn
                    print(targetSpawn.Info.Name .. " spawn found in ReplicatedStorage! Tweening to location...")
                    wait(1)
                    IsBossFarmActive = true
                    
                    -- Tween to the boss spawn location (with continuous checking)
                    Tween(targetSpawn.SpawnCFrame)
                    
                    -- After reaching spawn location (if no boss was found during tween),
                    -- wait and check for boss again
                    if IsBossFarmActive and not IsTweening then
                        -- Check for all bosses after reaching spawn
                        local bossesAfterTween = FindActiveBosses()
                        
                        if #bossesAfterTween > 0 then
                            -- Boss found after tween, kill highest priority one
                            KillBoss(bossesAfterTween[1].Boss)
                        else
                            -- No boss found, wait at spawn location
                            print("At spawn location but no boss found. Waiting...")
                            local waitTimer = 0
                            
                            while waitTimer < 30 and #FindActiveBosses() == 0 do
                                wait(1)
                                waitTimer = waitTimer + 1
                                
                                -- Check if all required items are obtained
                                if getgenv().StopFarmingWhenItemsObtained and AreBothItemsObtained() then
                                    if not HasPrintedItemsObtained then
                                        print("All required items obtained! Stopping farm...")
                                        HasPrintedItemsObtained = true
                                    end
                                    IsBossFarmActive = false
                                    break
                                end
                            end
                            
                            -- Check if any boss appeared while waiting
                            local newBosses = FindActiveBosses()
                            if #newBosses > 0 then
                                KillBoss(newBosses[1].Boss)
                            end
                        end
                    end
                    
                    -- Reset state
                    IsBossFarmActive = false
                else
                    -- No boss spawns found
                    print("No boss spawns found in ReplicatedStorage. Waiting...")
                    wait(3)
                end
            end
        end
    end
end)

-- Setup a separate loop to continuously monitor for boss appearance while tweening
task.spawn(function()
    while wait(0.5) do
        if IsTweening then
            -- Check if all required items are obtained
            if getgenv().StopFarmingWhenItemsObtained and AreBothItemsObtained() then
                if not HasPrintedItemsObtained then
                    print("All required items obtained! Stopping farm...")
                    HasPrintedItemsObtained = true
                end
                IsBossFarmActive = false
                IsTweening = false
                continue
            end
            
            -- Reset the flag if items are no longer obtained
            if not AreBothItemsObtained() then
                HasPrintedItemsObtained = false
            end
            
            -- Check if any boss appeared while we're tweening to spawn
            local activeBosses = FindActiveBosses()
            
            if #activeBosses > 0 then
                print("Boss appeared during search! Redirecting...")
                -- The tween function will handle redirecting to the boss
            end
        end
    end
end)

-- Create the GUI
local gui = CreateGUI()

-- Server hopping loop
task.spawn(function()
    while true do
        wait(5) 
        
        if getgenv().StopFarmingWhenItemsObtained and AreBothItemsObtained() then
            ServerHoppingStatus.Text = "Items obtained"
            ServerHoppingStatus.TextColor3 = Color3.fromRGB(0, 255, 0)
            
            -- Nếu đã có đủ item và đã kích hoạt chế độ Auto Pull Lever,
            -- kiểm tra xem có Mirage Island hay không, nếu không có thì tìm server có Mirage
            if getgenv().AutoPullLeverWhenItemsObtained and _G.AutoPullLever then
                if not game:GetService("Workspace").Map:FindFirstChild("MysticIsland") then
                    ServerHoppingStatus.Text = "Tìm server có Mirage Island..."
                    ServerHoppingStatus.TextColor3 = Color3.fromRGB(255, 165, 0)
                    HopToMirageServer()
                end
            end
            
            wait(30) 
            continue
        end
        
        if IsBossFarmActive or IsRespawning or IsTweening then
            continue
        end
        
        local activeBosses = FindActiveBosses()
        local availableSpawns = FindAvailableBossSpawns()
        
        if #activeBosses == 0 and #availableSpawns == 0 then
            ServerHoppingStatus.Text = "Server Hopping: Finding servers with bosses..."
            ServerHoppingStatus.TextColor3 = Color3.fromRGB(255, 255, 0)
            CheckAPIAndHop()
        end
    end
end)

-- Auto pull lever loop
task.spawn(function()
    while task.wait(1) do 
        pcall(function()
            if _G.AutoPullLever then 
                PullLever()
            end
        end)
    end
end)

-- Final notification
print("Script đã được chạy thành công!")
print("Fast Attack: Enabled")
print("Boss Priority:")
for _, bossInfo in ipairs(BossList) do
    print("- Priority " .. bossInfo.Priority .. ": " .. bossInfo.Name)
end
print("Auto Pull Lever: " .. (getgenv().AutoPullLeverWhenItemsObtained and "Enabled" or "Disabled"))
